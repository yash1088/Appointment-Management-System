package FE.SendData;


/**
* SendData/SendData_interfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SendData_interface.idl
* Saturday, April 9, 2022 4:31:42 o'clock PM EDT
*/

public abstract class SendData_interfacePOA extends org.omg.PortableServer.Servant
 implements SendData_interfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("sayHello", new java.lang.Integer (0));
    _methods.put ("shutdown", new java.lang.Integer (1));
    _methods.put ("authenticate", new java.lang.Integer (2));
    _methods.put ("printMsg", new java.lang.Integer (3));
    _methods.put ("add_appointment", new java.lang.Integer (4));
    _methods.put ("list_appointment_availability", new java.lang.Integer (5));
    _methods.put ("book_appointment", new java.lang.Integer (6));
    _methods.put ("get_appointment_schedule", new java.lang.Integer (7));
    _methods.put ("cancel_appointment", new java.lang.Integer (8));
    _methods.put ("remove_appointment", new java.lang.Integer (9));
    _methods.put ("swap_appointment", new java.lang.Integer (10));
    _methods.put ("fault", new java.lang.Integer (11));
    _methods.put ("crash", new java.lang.Integer (12));
    _methods.put ("general", new java.lang.Integer (13));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // SendData/SendData_interface/sayHello
       {
         String $result = null;
         $result = this.sayHello ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // SendData/SendData_interface/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }


  //string login_credentials(string str);
       case 2:  // SendData/SendData_interface/authenticate
       {
         String client_userName = in.read_string ();
         String client_password = in.read_string ();
         boolean $result = false;
         $result = this.authenticate (client_userName, client_password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  //MTL Admin
       case 3:  // SendData/SendData_interface/printMsg
       {
         String msg = in.read_string ();
         String $result = null;
         $result = this.printMsg (msg);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //Appointment Creation
       case 4:  // SendData/SendData_interface/add_appointment
       {
         String options_appointment_type_admin = in.read_string ();
         String final_appointmentID_admin = in.read_string ();
         int slot_numbers = in.read_long ();
         String admin_Id = in.read_string ();
         String $result = null;
         $result = this.add_appointment (options_appointment_type_admin, final_appointmentID_admin, slot_numbers, admin_Id);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //List of Appointment
       case 5:  // SendData/SendData_interface/list_appointment_availability
       {
         String appointment_type = in.read_string ();
         String admin_Id = in.read_string ();
         String $result = null;
         $result = this.list_appointment_availability (appointment_type, admin_Id);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //Book appointment
       case 6:  // SendData/SendData_interface/book_appointment
       {
         String patient_Id = in.read_string ();
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String $result = null;
         $result = this.book_appointment (patient_Id, appointmentID, appointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //Get Scheduled Appointment
       case 7:  // SendData/SendData_interface/get_appointment_schedule
       {
         String patient_Id = in.read_string ();
         String $result = null;
         $result = this.get_appointment_schedule (patient_Id);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //Get Cancel Appointment
       case 8:  // SendData/SendData_interface/cancel_appointment
       {
         String patient_Id = in.read_string ();
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String $result = null;
         $result = this.cancel_appointment (patient_Id, appointmentID, appointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //Get Remove Appointment
       case 9:  // SendData/SendData_interface/remove_appointment
       {
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String patientID = in.read_string ();
         String $result = null;
         $result = this.remove_appointment (appointmentID, appointmentType, patientID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //Swap Appointment
       case 10:  // SendData/SendData_interface/swap_appointment
       {
         String patientID = in.read_string ();
         String old_appointmentID = in.read_string ();
         String old_appointmentType = in.read_string ();
         String new_appointmentID = in.read_string ();
         String new_appointmentType = in.read_string ();
         String $result = null;
         $result = this.swap_appointment (patientID, old_appointmentID, old_appointmentType, new_appointmentID, new_appointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 11:  // SendData/SendData_interface/fault
       {
         String adminID = in.read_string ();
         String $result = null;
         $result = this.fault (adminID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 12:  // SendData/SendData_interface/crash
       {
         String adminID = in.read_string ();
         String $result = null;
         $result = this.crash (adminID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 13:  // SendData/SendData_interface/general
       {
         String adminID = in.read_string ();
         String $result = null;
         $result = this.general (adminID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:SendData/SendData_interface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public SendData_interface _this() 
  {
    return SendData_interfaceHelper.narrow(
    super._this_object());
  }

  public SendData_interface _this(org.omg.CORBA.ORB orb) 
  {
    return SendData_interfaceHelper.narrow(
    super._this_object(orb));
  }


} // class SendData_interfacePOA
